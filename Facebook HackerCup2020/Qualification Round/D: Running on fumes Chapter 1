Method1:- Using Recursion - Memory Consuming
/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.util.*;
import java.io.*;
public class Alchemy
{

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		for(int p=0;p<t;p++)
		{
		    int o=sc.nextInt();
		    String s=sc.next();
		    char[] arr=s.toCharArray();
		    int n=arr.length;
		    for(int i=0;i<n;)
		    {
		        boolean loo=false;
		        for(int j=i;j<n;j++)
		        {
		            boolean boo=false;
		            Map<Character,Integer> map=new HashMap<Character,Integer>();
		            if(j-i+1==3)
		            {
		            for(int k=i;k<=j;k++)
		            {
		                if(map.containsKey(arr[k]))
		                {
		                    map.put(arr[k],map.get(arr[k])+1);
		                }
		                else
		                {
		                    map.put(arr[k],1);
		                }
		            }
		            int a=map.getOrDefault('A',0);
		            int b=map.getOrDefault('B',0);
		            char ch;
		            if(a==2)
		            {
		                ch='A';
		                arr[i]=ch;
		                for(int x=i+1;x<n;x++)
		                {
		                    if(x+2<n)
		                    {
		                        arr[x]=arr[x+2];
		                    }
		                }
		                n=n-2;
		                boo=true;
		            }
		            else if(b==2)
		            {
		                ch='B';
		                arr[i]=ch;
		                for(int x=i+1;x<n;x++)
		                {
		                    if(x+2<n)
		                    {
		                        arr[x]=arr[x+2];
		                    }
		                }
		                n=n-2;
		                boo=true;
		            }
		            if(boo==true)
		            {
		                loo=true;
		                break;
		            }
		            
		            }
		            
		        }
		        if(loo==true)
		        {
		            i=0;
		        }
		        else{
		            i++;
		        }
		    }
		   if(n==1)
		   {
		       System.out.println("Case #"+(p+1)+": Y");
		   }
		   else
		   {
		       System.out.println("Case #"+(p+1)+": N");
		   }
		}
		
	}
}


###########################################################################

Method2:- Using Dynamic Programming

Method3:- Using Segment Trees
